# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:
  - build
  - test
  - deploy

image: python:3.10

variables:
  PYTHONDONTWRITEBYTECODE: "1"  # Skip writing .pyc files to disk

before_script:
  - pip install --upgrade pip  # Update pip to the latest version
  - pip install -r requirements.txt  # Install dependencies

build:
  stage: build
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."

unit_test:
  stage: test
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - python -m unittest discover tests/

lint_test:
  stage: test
  script:
    - echo "Running lint tests..."
    - pylint --exit-zero --disable=missing-module-docstring app/ tests/

deploy:
  stage: deploy
  image: docker:stable
  services:
    - docker:dind
  script:
    - echo "Building Docker image..."
    - docker build --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
    - echo "Pushing Docker image..."
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  environment:
    name: production
